# Functional Interface?
    --> It is an interface that contains only one abstract method(100% incomplete methods).


-------------------------------------------------------------------------------------------------
# Types of Functional Interface?
    --> Consumer<T>:
        -> Represents an operation that takes a single input argument of type T and returns no result.
        -> Example: Consumer<String> printer = (s) -> System.out.println(s);

    --> Supplier<T>:
        -> Represents a supplier of results, producing a result of type T.
        -> Example: Supplier<Integer> randomNumber = () -> Math.random();

    --> Predicate<T>:
        -> Represents a predicate (boolean-valued function) of one argument.
        -> Example: Predicate<String> isNotEmpty = (s) -> !s.isEmpty();

    --> Function<T, R>:
        -> Represents a function that takes one argument of type T and produces a result of type R.
        -> Example: Function<Integer, String> intToString = (i) -> Integer.toString(i);

    --> UnaryOperator<T>:
        -> Represents an operation on a single operand that produces a result of the same type as its operand.
        -> Example: UnaryOperator<Integer> square = (x) -> x * x;

    --> BinaryOperator<T>:
        -> Represents an operation upon two operands of the same type, producing a result of the same type as the operands.
        -> Example: BinaryOperator<Integer> sum = (a, b) -> a + b;

    --> Runnable:
        -> Represents a task that takes no input and returns no result.
        -> Example: Runnable task = () -> System.out.println("Executing task");

    --> Callable<V>:
        -> Represents a task that returns a result and may throw an exception.
        -> Example: Callable<String> callableTask = () -> "Result of the callable task";


-------------------------------------------------------------------------------------------------
-->Example(Stream API):
    --> EX1 (Filter numbers greater than 20):
        package com.example.blogger;

        import java.util.Arrays;
        import java.util.List;
        import java.util.function.Predicate;
        import java.util.stream.Collectors;

        public class MainUtil {
            public static void main(String[] args) {
                //Predicate<Integer> condition = y->y>0;
                //boolean val = condition.test(100);
                //System.out.println(val);

                List<Integer> data = Arrays.asList(10, 20, 30, 40, 50, 60, 70, 80, 90, 100);
                List<Integer> newData = data.stream().filter(x -> x>20).collect(Collectors.toList());
                System.out.println(newData); //[30, 40, 50, 60, 70, 80, 90, 100]
            }
        }



    --> EX2 (Filter list of names starting with letter "M"):
            List<String> data = Arrays.asList("Mike", "Stallin", "Mithun", "Adam", "Sumit", "Micheal");
            List<String> newData = data.stream().filter(x -> x.startsWith("M")).collect(Collectors.toList());
            System.out.println(newData); //["Mike", "Mithun", "Micheal"]



    --> EX3 (Filter list of names ends with letter "n"):
            List<String> data = Arrays.asList("Mike", "Stallin", "Mithun", "Adam", "Sumit", "Micheal");
            List<String> newData = data.stream().filter(x -> x.startsWith("n")).collect(Collectors.toList());
            System.out.println(newData); //["Stallin", "Mithun"]



    --> EX4 (Give the number of times the name "Mike" is present):
            List<String> data = Arrays.asList("Mike", "Stallin", "Mithun", "Adam", "Sumit", "Micheal");
            List<String> newData = data.stream().filter(x -> x.equals("Mike")).collect(Collectors.toList());
            System.out.println(newData.size()); //1



    --> EX5 (Function Functional Interface):
            package com.example.blogger;

            import java.util.function.Function;
            
            public class A {
                public static void main(String[] args) {
                    Function<Integer, String> myFunction = i -> "Result: " +i; //Function Functional Interface
                    String val = myFunction.apply(100);
                    System.out.println(val); //Result: 100
                }
            }



    --> EX6 ('.map()'):
            List<Integer> data = Arrays.asList(10, 5, 2, 20);
            List<Integer> newData = data.stream().map(n->n*n).collect(Collectors.toList());
            System.out.println(newData); //[100, 25, 4, 400]



    --> EX7 ('.sorted()'):
            List<Integer> data = Arrays.asList(10, 5, 2, 20);
            List<Integer> newData = data.stream().sorted().collect(Collectors.toList());
            System.out.println(newData); //[2, 5, 10, 20]



    --> EX8 (Remove Duplicate):
            List<Integer> data = Arrays.asList(10, 5, 2, 20, 5, 8, 2, 10);
            List<Integer> newData = data.stream().distinct().collect(Collectors.toList());
            System.out.println(newData); //[2, 5, 10, 20]



    --> EX9 (Supplier(Functional Interface)):
            //Type1:
            Supplier<A> mySupplier = () -> new A();
            A s = mySupplier.get();
            System.out.println(s);  //com.example.blogger.A@579bb367



    --> EX10 (Consumer(Functional Interface)):
            Consumer<String> myConsumer= s -> System.out.println("Consumed: "+s);
            myConsumer.accept("Hello"); //Consumed: Hello



    --> EX10 (max, min integer):
            List<Integer> numbers = Arrays.asList(100, 500, 7, 400, 500, 10000); 
            
            List<Integer> maxVal = number.stream().max(Integer::compareTo).get();
            List<Integer> minVal = number.stream().min(Integer::compareTo).get();
            
            System.out.println(maxVal); //10000
            System.out.println(minVal); //7


    --> EX11 (Group by salary):
        List<Employee1> data = Arrays.asList(
                new Employee1("mike", 5000),
                new Employee1("Tom", 4000)
        );

        Map<Double, List<Employee1>> groups = data.stream().collect(Collectors.groupingBy(Employee1::getSalary));
        System.out.println(groups); //{5000.0=[com.example.blogger.Employee1@46fbb2c1], 4000.0=[com.example.blogger.Employee1@1698c449]}
            
        for(Map.Entry<Double, List<Employee1>> entry : groups.entrySet()){
            double salary = entry.getKey();
            List<Employee1> employlist = entry.getValue();
            System.out.println("Employee with salary " + salary + ":");

            for (Employee1 employee1: employlist){
                System.out.println("\t" + employee1.getName()); //Employee with salary 5000.0: mike  Employee with salary 4000.0:Tom
            }
        }


-------------------------------------------------------------------------------------------------
#Coping 'Entity Object' to 'DTO Object':
    - Comparator vs Comparable


-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------








